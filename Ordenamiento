ackage ordenamiento;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Ordenamiento {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Ingresa el tamaño del arreglo: ");
        int size = scanner.nextInt();
        
        int[] arr = generarNumerosAleatorios(size);
        
        System.out.println("Arreglo original: " + Arrays.toString(arr));
        
        System.out.println("Elige el método de ordenamiento: ");
        System.out.println("1. Akerman");
        System.out.println("2. Torres de Hanoi");
        System.out.println("3. Inserción");
        System.out.println("4. Quicksort");
        System.out.println("5. Selección");
        System.out.println("6. Shell");
        System.out.println("7. Método Burbuja");
        
        int opcion = scanner.nextInt();
        scanner.close();
        
        switch (opcion) {
            case 1:
                System.out.println("Ordenando con Akerman...");
                // Lógica de ordenamiento Akerman
                break;
            case 2:
                System.out.println("Ordenando con Torres de Hanoi...");
                moverTorres(arr.length, 'A', 'C', 'B');
                break;
            case 3:
                System.out.println("Ordenando con Inserción...");
                insercionSort(arr);
                break;
            case 4:
                System.out.println("Ordenando con Quicksort...");
                quicksort(arr, 0, arr.length - 1);
                break;
            case 5:
                System.out.println("Ordenando con Selección...");
                seleccionSort(arr);
                break;
            case 6:
                System.out.println("Ordenando con Shell...");
                shellSort(arr);
                break;
            case 7:
                System.out.println("Ordenando con Método Burbuja...");
                burbujaSort(arr);
                break;
            default:
                System.out.println("Opción inválida.");
                break;
        }
        
        System.out.println("Arreglo ordenado: " + Arrays.toString(arr));
    }
    
    public static int[] generarNumerosAleatorios(int size) {
        int[] arr = new int[size];
        Random random = new Random();
        for (int i = 0; i < size; i++) {
            arr[i] = random.nextInt(100); // Genera números aleatorios entre 0 y 99
        }
        return arr;
    }
    
    public static void moverTorres(int n, char origen, char destino, char auxiliar) {
        // Implementación del método de Torres de Hanoi (código omitido para mayor brevedad)
        if (n == 1) {
            System.out.println("Mover disco 1 desde " + origen + " a " + destino);
        } else {
            moverTorres(n - 1, origen, auxiliar, destino);
            System.out.println("Mover disco " + n + " desde " + origen + " a " + destino);
            moverTorres(n - 1, auxiliar, destino, origen);
        }
    
    }
    
    public static void insercionSort(int[] arr) {
       int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    
    }
    public static void quicksort(int[] arr, int inicio, int fin) { 
       if (inicio < fin) {
            int indiceParticion = particion(arr, inicio, fin);
            quicksort(arr, inicio, indiceParticion - 1);
            quicksort(arr, indiceParticion + 1, fin);
        }
    }

    public static int particion(int[] arr, int inicio, int fin) {
        int pivote = arr[fin];
        int i = inicio - 1;
        for (int j = inicio; j < fin; j++) {
            if (arr[j] <= pivote) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[fin];
        arr[fin] = temp;
        return i + 1;
    }

    
    
    public static void seleccionSort(int[] arr) {
    int n = arr.length;

    for (int i = 0; i < n - 1; i++) {
        int minIdx = i;

        // Encuentra el índice del elemento mínimo en el subarreglo sin ordenar
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIdx]) {
                minIdx = j;
            }
        }

        // Intercambia el elemento mínimo con el primer elemento sin ordenar
        int temp = arr[minIdx];
        arr[minIdx] = arr[i];
        arr[i] = temp;
    }
}

    
    public static void shellSort(int[] arr) {
        int n = arr.length;
        for (int gap = n / 2; gap > 0; gap /= 2) {
            for (int i = gap; i < n; i++) {
                int temp = arr[i];
                int j;
                for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                    arr[j] = arr[j - gap];
                }
                arr[j] = temp;
            }
        }
    
    }
    
    public static void burbujaSort(int[] arr) {
       
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Intercambiar los elementos
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        
    }
}
